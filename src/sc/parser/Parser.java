/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgrammeProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AListeVarVar */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AVarVar */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AOuExpression */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AExp2Expression */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AEtExp2 */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AExp3Exp2 */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AEgalExp3 */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AInferieurExp3 */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AExp4Exp3 */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce APlusExp4 */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AMoinsExp4 */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AExp5Exp4 */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AFoisExp5 */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce ADiviserExp5 */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce AExp6Exp5 */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce ANonExp6 */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AExp7Exp6 */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce ANombreExp7 */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AVarExp7 */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce AParanthesesExp7 */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AAppelfonctionExp7 */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce ALireExp7 */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce ARecursifListeExp */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list, false);
            }
            break;
            case 24: /* reduce AFinalListeExp */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce AFinalListeExpBis */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list, false);
            }
            break;
            case 26: /* reduce ARecursifListeExpBis */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list, false);
            }
            break;
            case 27: /* reduce AInstructionAffectationInstruction */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce AInstructionBlocInstruction */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce AInstructionSiInstruction */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list, false);
            }
            break;
            case 30: /* reduce AInstructionTantqueInstruction */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
            case 31: /* reduce AInstructionRappelInstruction */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list, false);
            }
            break;
            case 32: /* reduce AInstructionRetourInstruction */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list, false);
            }
            break;
            case 33: /* reduce AInstructionEcrireInstruction */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list, false);
            }
            break;
            case 34: /* reduce AInstructionVideInstruction */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list, false);
            }
            break;
            case 35: /* reduce AListeInstructionListeInstruction */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list, false);
            }
            break;
            case 36: /* reduce AListeFinaleListeInstruction */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, false);
            }
            break;
            case 37: /* reduce AInstructionAffectation */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list, false);
            }
            break;
            case 38: /* reduce AInstructionBlocInstructionBloc */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list, false);
            }
            break;
            case 39: /* reduce AAvecsinonInstructionSi */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list, false);
            }
            break;
            case 40: /* reduce ASanssinonInstructionSi */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list, false);
            }
            break;
            case 41: /* reduce AInstructionSinon */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce AInstructionTantque */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list, false);
            }
            break;
            case 43: /* reduce AInstructionRappel */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list, false);
            }
            break;
            case 44: /* reduce AInstructionRetour */
            {
                ArrayList<Object> list = new44();
                push(goTo(19), list, false);
            }
            break;
            case 45: /* reduce AInstructionEcrire */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list, false);
            }
            break;
            case 46: /* reduce AInstructionVide */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list, false);
            }
            break;
            case 47: /* reduce ADecvarDecvar */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list, false);
            }
            break;
            case 48: /* reduce AListedecvarDecvar */
            {
                ArrayList<Object> list = new48();
                push(goTo(22), list, false);
            }
            break;
            case 49: /* reduce AListedecvarListedecvar */
            {
                ArrayList<Object> list = new49();
                push(goTo(23), list, false);
            }
            break;
            case 50: /* reduce AListedecvarFinListedecvar */
            {
                ArrayList<Object> list = new50();
                push(goTo(23), list, false);
            }
            break;
            case 51: /* reduce AListedecvarbisListedecvarbis */
            {
                ArrayList<Object> list = new51();
                push(goTo(24), list, false);
            }
            break;
            case 52: /* reduce AListedecvarbisFinListedecvarbis */
            {
                ArrayList<Object> list = new52();
                push(goTo(24), list, false);
            }
            break;
            case 53: /* reduce AListedecvaroptListedecvaropt */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list, false);
            }
            break;
            case 54: /* reduce AListedecvaroptFinListedecvaropt */
            {
                ArrayList<Object> list = new54();
                push(goTo(25), list, false);
            }
            break;
            case 55: /* reduce AAvecparamAppelfonction */
            {
                ArrayList<Object> list = new55();
                push(goTo(26), list, false);
            }
            break;
            case 56: /* reduce ASansparamAppelfonction */
            {
                ArrayList<Object> list = new56();
                push(goTo(26), list, false);
            }
            break;
            case 57: /* reduce ADecfoncDecfonc */
            {
                ArrayList<Object> list = new57();
                push(goTo(27), list, false);
            }
            break;
            case 58: /* reduce AListedecfoncListedecfonc */
            {
                ArrayList<Object> list = new58();
                push(goTo(28), list, false);
            }
            break;
            case 59: /* reduce AListedecfoncFinListedecfonc */
            {
                ArrayList<Object> list = new59();
                push(goTo(28), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgrammeProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListedecvaropt plistedecvaroptNode2;
        PListedecfonc plistedecfoncNode3;
        plistedecvaroptNode2 = (PListedecvaropt)nodeArrayList1.get(0);
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList2.get(0);

        pprogrammeNode1 = new AProgrammeProgramme(plistedecvaroptNode2, plistedecfoncNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AListeVarVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        TCrochetOuvrant tcrochetouvrantNode3;
        PExpression pexpressionNode4;
        TCrochetFermant tcrochetfermantNode5;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        tcrochetouvrantNode3 = (TCrochetOuvrant)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tcrochetfermantNode5 = (TCrochetFermant)nodeArrayList4.get(0);

        pvarNode1 = new AListeVarVar(tidentifiantNode2, tcrochetouvrantNode3, pexpressionNode4, tcrochetfermantNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVarVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);

        pvarNode1 = new AVarVar(tidentifiantNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AOuExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExp2 pexp2Node2;
        TOu touNode3;
        PExpression pexpressionNode4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOuExpression(pexp2Node2, touNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AExp2Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExp2 pexp2Node2;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);

        pexpressionNode1 = new AExp2Expression(pexp2Node2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AEtExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TEt tetNode3;
        PExp2 pexp2Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp2Node1 = new AEtExp2(pexp3Node2, tetNode3, pexp2Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AExp3Exp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);

        pexp2Node1 = new AExp3Exp2(pexp3Node2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AEgalExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TEgal tegalNode3;
        PExp3 pexp3Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp3Node1 = new AEgalExp3(pexp4Node2, tegalNode3, pexp3Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AInferieurExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TInferieur tinferieurNode3;
        PExp3 pexp3Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tinferieurNode3 = (TInferieur)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp3Node1 = new AInferieurExp3(pexp4Node2, tinferieurNode3, pexp3Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AExp4Exp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);

        pexp3Node1 = new AExp4Exp3(pexp4Node2);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce APlusExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp5 pexp5Node2;
        TPlus tplusNode3;
        PExp4 pexp4Node4;
        pexp5Node2 = (PExp5)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp4Node1 = new APlusExp4(pexp5Node2, tplusNode3, pexp4Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMoinsExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp5 pexp5Node2;
        TMoins tmoinsNode3;
        PExp4 pexp4Node4;
        pexp5Node2 = (PExp5)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp4Node1 = new AMoinsExp4(pexp5Node2, tmoinsNode3, pexp4Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AExp5Exp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp5 pexp5Node2;
        pexp5Node2 = (PExp5)nodeArrayList1.get(0);

        pexp4Node1 = new AExp5Exp4(pexp5Node2);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AFoisExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PExp6 pexp6Node2;
        TFois tfoisNode3;
        PExp5 pexp5Node4;
        pexp6Node2 = (PExp6)nodeArrayList1.get(0);
        tfoisNode3 = (TFois)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp5Node1 = new AFoisExp5(pexp6Node2, tfoisNode3, pexp5Node4);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ADiviserExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PExp6 pexp6Node2;
        TDiviser tdiviserNode3;
        PExp5 pexp5Node4;
        pexp6Node2 = (PExp6)nodeArrayList1.get(0);
        tdiviserNode3 = (TDiviser)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp5Node1 = new ADiviserExp5(pexp6Node2, tdiviserNode3, pexp5Node4);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AExp6Exp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PExp6 pexp6Node2;
        pexp6Node2 = (PExp6)nodeArrayList1.get(0);

        pexp5Node1 = new AExp6Exp5(pexp6Node2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ANonExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TNon tnonNode2;
        PExp7 pexp7Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pexp7Node3 = (PExp7)nodeArrayList2.get(0);

        pexp6Node1 = new ANonExp6(tnonNode2, pexp7Node3);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AExp7Exp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        PExp7 pexp7Node2;
        pexp7Node2 = (PExp7)nodeArrayList1.get(0);

        pexp6Node1 = new AExp7Exp6(pexp7Node2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ANombreExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexp7Node1 = new ANombreExp7(tnombreNode2);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AVarExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexp7Node1 = new AVarExp7(pvarNode2);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AParanthesesExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        TParantheseOuvrante tparantheseouvranteNode2;
        PExpression pexpressionNode3;
        TParantheseFermante tparanthesefermanteNode4;
        tparantheseouvranteNode2 = (TParantheseOuvrante)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tparanthesefermanteNode4 = (TParantheseFermante)nodeArrayList3.get(0);

        pexp7Node1 = new AParanthesesExp7(tparantheseouvranteNode2, pexpressionNode3, tparanthesefermanteNode4);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAppelfonctionExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        PAppelfonction pappelfonctionNode2;
        pappelfonctionNode2 = (PAppelfonction)nodeArrayList1.get(0);

        pexp7Node1 = new AAppelfonctionExp7(pappelfonctionNode2);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ALireExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp7 pexp7Node1;
        {
            // Block
        TLire tlireNode2;
        TParantheseOuvrante tparantheseouvranteNode3;
        TParantheseFermante tparanthesefermanteNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tparantheseouvranteNode3 = (TParantheseOuvrante)nodeArrayList2.get(0);
        tparanthesefermanteNode4 = (TParantheseFermante)nodeArrayList3.get(0);

        pexp7Node1 = new ALireExp7(tlireNode2, tparantheseouvranteNode3, tparanthesefermanteNode4);
        }
	nodeList.add(pexp7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ARecursifListeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExp plisteexpNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PListeExpBis plisteexpbisNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        plisteexpbisNode3 = (PListeExpBis)nodeArrayList2.get(0);

        plisteexpNode1 = new ARecursifListeExp(pexpressionNode2, plisteexpbisNode3);
        }
	nodeList.add(plisteexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFinalListeExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExp plisteexpNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        plisteexpNode1 = new AFinalListeExp(pexpressionNode2);
        }
	nodeList.add(plisteexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFinalListeExpBis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExpBis plisteexpbisNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpression pexpressionNode3;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        plisteexpbisNode1 = new AFinalListeExpBis(tvirguleNode2, pexpressionNode3);
        }
	nodeList.add(plisteexpbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ARecursifListeExpBis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeExpBis plisteexpbisNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpression pexpressionNode3;
        PListeExpBis plisteexpbisNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        plisteexpbisNode4 = (PListeExpBis)nodeArrayList3.get(0);

        plisteexpbisNode1 = new ARecursifListeExpBis(tvirguleNode2, pexpressionNode3, plisteexpbisNode4);
        }
	nodeList.add(plisteexpbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AInstructionAffectationInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstructionAffectation pinstructionaffectationNode2;
        pinstructionaffectationNode2 = (PInstructionAffectation)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstructionAffectationInstruction(pinstructionaffectationNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AInstructionBlocInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstructionBloc pinstructionblocNode2;
        pinstructionblocNode2 = (PInstructionBloc)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstructionBlocInstruction(pinstructionblocNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AInstructionSiInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstructionSi pinstructionsiNode2;
        pinstructionsiNode2 = (PInstructionSi)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstructionSiInstruction(pinstructionsiNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AInstructionTantqueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstructionTantque pinstructiontantqueNode2;
        pinstructiontantqueNode2 = (PInstructionTantque)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstructionTantqueInstruction(pinstructiontantqueNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AInstructionRappelInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstructionRappel pinstructionrappelNode2;
        pinstructionrappelNode2 = (PInstructionRappel)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstructionRappelInstruction(pinstructionrappelNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AInstructionRetourInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstructionRetour pinstructionretourNode2;
        pinstructionretourNode2 = (PInstructionRetour)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstructionRetourInstruction(pinstructionretourNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AInstructionEcrireInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstructionEcrire pinstructionecrireNode2;
        pinstructionecrireNode2 = (PInstructionEcrire)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstructionEcrireInstruction(pinstructionecrireNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AInstructionVideInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstructionVide pinstructionvideNode2;
        pinstructionvideNode2 = (PInstructionVide)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstructionVideInstruction(pinstructionvideNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AListeInstructionListeInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeInstruction plisteinstructionNode1;
        {
            // Block
        PInstruction pinstructionNode2;
        PListeInstruction plisteinstructionNode3;
        pinstructionNode2 = (PInstruction)nodeArrayList1.get(0);
        plisteinstructionNode3 = (PListeInstruction)nodeArrayList2.get(0);

        plisteinstructionNode1 = new AListeInstructionListeInstruction(pinstructionNode2, plisteinstructionNode3);
        }
	nodeList.add(plisteinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AListeFinaleListeInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListeInstruction plisteinstructionNode1;
        {
            // Block

        plisteinstructionNode1 = new AListeFinaleListeInstruction();
        }
	nodeList.add(plisteinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AInstructionAffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionAffectation pinstructionaffectationNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExpression pexpressionNode4;
        TPointVirgule tpointvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tpointvirguleNode5 = (TPointVirgule)nodeArrayList4.get(0);

        pinstructionaffectationNode1 = new AInstructionAffectation(pvarNode2, tegalNode3, pexpressionNode4, tpointvirguleNode5);
        }
	nodeList.add(pinstructionaffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AInstructionBlocInstructionBloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionBloc pinstructionblocNode1;
        {
            // Block
        TAccoladeOuvrante taccoladeouvranteNode2;
        PListeInstruction plisteinstructionNode3;
        TAccoladeFermante taccoladefermanteNode4;
        taccoladeouvranteNode2 = (TAccoladeOuvrante)nodeArrayList1.get(0);
        plisteinstructionNode3 = (PListeInstruction)nodeArrayList2.get(0);
        taccoladefermanteNode4 = (TAccoladeFermante)nodeArrayList3.get(0);

        pinstructionblocNode1 = new AInstructionBlocInstructionBloc(taccoladeouvranteNode2, plisteinstructionNode3, taccoladefermanteNode4);
        }
	nodeList.add(pinstructionblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAvecsinonInstructionSi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionSi pinstructionsiNode1;
        {
            // Block
        TSi tsiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PInstructionBloc pinstructionblocNode5;
        PInstructionSinon pinstructionsinonNode6;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pinstructionblocNode5 = (PInstructionBloc)nodeArrayList4.get(0);
        pinstructionsinonNode6 = (PInstructionSinon)nodeArrayList5.get(0);

        pinstructionsiNode1 = new AAvecsinonInstructionSi(tsiNode2, pexpressionNode3, talorsNode4, pinstructionblocNode5, pinstructionsinonNode6);
        }
	nodeList.add(pinstructionsiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ASanssinonInstructionSi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionSi pinstructionsiNode1;
        {
            // Block
        TSi tsiNode2;
        PExpression pexpressionNode3;
        TAlors talorsNode4;
        PInstructionBloc pinstructionblocNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pinstructionblocNode5 = (PInstructionBloc)nodeArrayList4.get(0);

        pinstructionsiNode1 = new ASanssinonInstructionSi(tsiNode2, pexpressionNode3, talorsNode4, pinstructionblocNode5);
        }
	nodeList.add(pinstructionsiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AInstructionSinon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionSinon pinstructionsinonNode1;
        {
            // Block
        TSinon tsinonNode2;
        PInstructionBloc pinstructionblocNode3;
        tsinonNode2 = (TSinon)nodeArrayList1.get(0);
        pinstructionblocNode3 = (PInstructionBloc)nodeArrayList2.get(0);

        pinstructionsinonNode1 = new AInstructionSinon(tsinonNode2, pinstructionblocNode3);
        }
	nodeList.add(pinstructionsinonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AInstructionTantque */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionTantque pinstructiontantqueNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PExpression pexpressionNode3;
        TFaire tfaireNode4;
        PInstructionBloc pinstructionblocNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pinstructionblocNode5 = (PInstructionBloc)nodeArrayList4.get(0);

        pinstructiontantqueNode1 = new AInstructionTantque(ttantqueNode2, pexpressionNode3, tfaireNode4, pinstructionblocNode5);
        }
	nodeList.add(pinstructiontantqueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AInstructionRappel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionRappel pinstructionrappelNode1;
        {
            // Block
        PAppelfonction pappelfonctionNode2;
        TPointVirgule tpointvirguleNode3;
        pappelfonctionNode2 = (PAppelfonction)nodeArrayList1.get(0);
        tpointvirguleNode3 = (TPointVirgule)nodeArrayList2.get(0);

        pinstructionrappelNode1 = new AInstructionRappel(pappelfonctionNode2, tpointvirguleNode3);
        }
	nodeList.add(pinstructionrappelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AInstructionRetour */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionRetour pinstructionretourNode1;
        {
            // Block
        TRetour tretourNode2;
        PExpression pexpressionNode3;
        TPointVirgule tpointvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointVirgule)nodeArrayList3.get(0);

        pinstructionretourNode1 = new AInstructionRetour(tretourNode2, pexpressionNode3, tpointvirguleNode4);
        }
	nodeList.add(pinstructionretourNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AInstructionEcrire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionEcrire pinstructionecrireNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TParantheseOuvrante tparantheseouvranteNode3;
        PExpression pexpressionNode4;
        TParantheseFermante tparanthesefermanteNode5;
        TPointVirgule tpointvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tparantheseouvranteNode3 = (TParantheseOuvrante)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tparanthesefermanteNode5 = (TParantheseFermante)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointVirgule)nodeArrayList5.get(0);

        pinstructionecrireNode1 = new AInstructionEcrire(tecrireNode2, tparantheseouvranteNode3, pexpressionNode4, tparanthesefermanteNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstructionecrireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AInstructionVide */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructionVide pinstructionvideNode1;
        {
            // Block
        TPointVirgule tpointvirguleNode2;
        tpointvirguleNode2 = (TPointVirgule)nodeArrayList1.get(0);

        pinstructionvideNode1 = new AInstructionVide(tpointvirguleNode2);
        }
	nodeList.add(pinstructionvideNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ADecvarDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        TEntier tentierNode2;
        TIdentifiant tidentifiantNode3;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);
        tidentifiantNode3 = (TIdentifiant)nodeArrayList2.get(0);

        pdecvarNode1 = new ADecvarDecvar(tentierNode2, tidentifiantNode3);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AListedecvarDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        TEntier tentierNode2;
        TIdentifiant tidentifiantNode3;
        TCrochetOuvrant tcrochetouvrantNode4;
        TNombre tnombreNode5;
        TCrochetFermant tcrochetfermantNode6;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);
        tidentifiantNode3 = (TIdentifiant)nodeArrayList2.get(0);
        tcrochetouvrantNode4 = (TCrochetOuvrant)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        tcrochetfermantNode6 = (TCrochetFermant)nodeArrayList5.get(0);

        pdecvarNode1 = new AListedecvarDecvar(tentierNode2, tidentifiantNode3, tcrochetouvrantNode4, tnombreNode5, tcrochetfermantNode6);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AListedecvarListedecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvar plistedecvarNode1;
        {
            // Block
        PDecvar pdecvarNode2;
        PListedecvarbis plistedecvarbisNode3;
        pdecvarNode2 = (PDecvar)nodeArrayList1.get(0);
        plistedecvarbisNode3 = (PListedecvarbis)nodeArrayList2.get(0);

        plistedecvarNode1 = new AListedecvarListedecvar(pdecvarNode2, plistedecvarbisNode3);
        }
	nodeList.add(plistedecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AListedecvarFinListedecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedecvar plistedecvarNode1;
        {
            // Block

        plistedecvarNode1 = new AListedecvarFinListedecvar();
        }
	nodeList.add(plistedecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AListedecvarbisListedecvarbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvarbis plistedecvarbisNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDecvar pdecvarNode3;
        PListedecvarbis plistedecvarbisNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdecvarNode3 = (PDecvar)nodeArrayList2.get(0);
        plistedecvarbisNode4 = (PListedecvarbis)nodeArrayList3.get(0);

        plistedecvarbisNode1 = new AListedecvarbisListedecvarbis(tvirguleNode2, pdecvarNode3, plistedecvarbisNode4);
        }
	nodeList.add(plistedecvarbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AListedecvarbisFinListedecvarbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedecvarbis plistedecvarbisNode1;
        {
            // Block

        plistedecvarbisNode1 = new AListedecvarbisFinListedecvarbis();
        }
	nodeList.add(plistedecvarbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AListedecvaroptListedecvaropt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvaropt plistedecvaroptNode1;
        {
            // Block
        PListedecvar plistedecvarNode2;
        TPointVirgule tpointvirguleNode3;
        plistedecvarNode2 = (PListedecvar)nodeArrayList1.get(0);
        tpointvirguleNode3 = (TPointVirgule)nodeArrayList2.get(0);

        plistedecvaroptNode1 = new AListedecvaroptListedecvaropt(plistedecvarNode2, tpointvirguleNode3);
        }
	nodeList.add(plistedecvaroptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AListedecvaroptFinListedecvaropt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedecvaropt plistedecvaroptNode1;
        {
            // Block

        plistedecvaroptNode1 = new AListedecvaroptFinListedecvaropt();
        }
	nodeList.add(plistedecvaroptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAvecparamAppelfonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppelfonction pappelfonctionNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        TParantheseOuvrante tparantheseouvranteNode3;
        PListeExp plisteexpNode4;
        TParantheseFermante tparanthesefermanteNode5;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        tparantheseouvranteNode3 = (TParantheseOuvrante)nodeArrayList2.get(0);
        plisteexpNode4 = (PListeExp)nodeArrayList3.get(0);
        tparanthesefermanteNode5 = (TParantheseFermante)nodeArrayList4.get(0);

        pappelfonctionNode1 = new AAvecparamAppelfonction(tidentifiantNode2, tparantheseouvranteNode3, plisteexpNode4, tparanthesefermanteNode5);
        }
	nodeList.add(pappelfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASansparamAppelfonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppelfonction pappelfonctionNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        TParantheseOuvrante tparantheseouvranteNode3;
        TParantheseFermante tparanthesefermanteNode4;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        tparantheseouvranteNode3 = (TParantheseOuvrante)nodeArrayList2.get(0);
        tparanthesefermanteNode4 = (TParantheseFermante)nodeArrayList3.get(0);

        pappelfonctionNode1 = new ASansparamAppelfonction(tidentifiantNode2, tparantheseouvranteNode3, tparanthesefermanteNode4);
        }
	nodeList.add(pappelfonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ADecfoncDecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecfonc pdecfoncNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        TParantheseOuvrante tparantheseouvranteNode3;
        PListedecvar plistedecvarNode4;
        TParantheseFermante tparanthesefermanteNode5;
        PListedecvaropt plistedecvaroptNode6;
        PInstructionBloc pinstructionblocNode7;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        tparantheseouvranteNode3 = (TParantheseOuvrante)nodeArrayList2.get(0);
        plistedecvarNode4 = (PListedecvar)nodeArrayList3.get(0);
        tparanthesefermanteNode5 = (TParantheseFermante)nodeArrayList4.get(0);
        plistedecvaroptNode6 = (PListedecvaropt)nodeArrayList5.get(0);
        pinstructionblocNode7 = (PInstructionBloc)nodeArrayList6.get(0);

        pdecfoncNode1 = new ADecfoncDecfonc(tidentifiantNode2, tparantheseouvranteNode3, plistedecvarNode4, tparanthesefermanteNode5, plistedecvaroptNode6, pinstructionblocNode7);
        }
	nodeList.add(pdecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AListedecfoncListedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecfonc plistedecfoncNode1;
        {
            // Block
        PDecfonc pdecfoncNode2;
        PListedecfonc plistedecfoncNode3;
        pdecfoncNode2 = (PDecfonc)nodeArrayList1.get(0);
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList2.get(0);

        plistedecfoncNode1 = new AListedecfoncListedecfonc(pdecfoncNode2, plistedecfoncNode3);
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AListedecfoncFinListedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListedecfonc plistedecfoncNode1;
        {
            // Block

        plistedecfoncNode1 = new AListedecfoncFinListedecfonc();
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 54}, {4, REDUCE, 50}, {25, SHIFT, 1}, },
			{{-1, ERROR, 1}, {28, SHIFT, 6}, },
			{{-1, ERROR, 2}, {29, ACCEPT, -1}, },
			{{-1, REDUCE, 52}, {5, SHIFT, 7}, },
			{{-1, ERROR, 4}, {4, SHIFT, 9}, },
			{{-1, REDUCE, 59}, {28, SHIFT, 10}, },
			{{-1, REDUCE, 47}, {10, SHIFT, 13}, },
			{{-1, ERROR, 7}, {25, SHIFT, 1}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 10}, {6, SHIFT, 15}, },
			{{-1, REDUCE, 59}, {28, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 13}, {18, SHIFT, 17}, },
			{{-1, REDUCE, 52}, {5, SHIFT, 7}, },
			{{-1, REDUCE, 50}, {25, SHIFT, 1}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 17}, {11, SHIFT, 20}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 19}, {7, SHIFT, 21}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 50}, {8, REDUCE, 54}, {25, SHIFT, 1}, },
			{{-1, ERROR, 22}, {8, SHIFT, 23}, },
			{{-1, REDUCE, 36}, {4, SHIFT, 25}, {8, SHIFT, 23}, {19, SHIFT, 26}, {21, SHIFT, 27}, {24, SHIFT, 28}, {27, SHIFT, 29}, {28, SHIFT, 30}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 26}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 27}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 28}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 29}, {6, SHIFT, 58}, },
			{{-1, REDUCE, 2}, {6, SHIFT, 59}, {10, SHIFT, 60}, },
			{{-1, ERROR, 31}, {14, SHIFT, 61}, },
			{{-1, REDUCE, 36}, {4, SHIFT, 25}, {8, SHIFT, 23}, {19, SHIFT, 26}, {21, SHIFT, 27}, {24, SHIFT, 28}, {27, SHIFT, 29}, {28, SHIFT, 30}, },
			{{-1, ERROR, 33}, {9, SHIFT, 63}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 42}, {4, SHIFT, 64}, },
			{{-1, ERROR, 43}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 44}, {6, SHIFT, 43}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 46}, {6, SHIFT, 67}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 48}, {22, SHIFT, 68}, },
			{{-1, REDUCE, 4}, {17, SHIFT, 69}, },
			{{-1, REDUCE, 6}, {16, SHIFT, 70}, },
			{{-1, REDUCE, 9}, {12, SHIFT, 71}, {14, SHIFT, 72}, },
			{{-1, REDUCE, 12}, {0, SHIFT, 73}, {1, SHIFT, 74}, },
			{{-1, REDUCE, 15}, {2, SHIFT, 75}, {3, SHIFT, 76}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 56}, {23, SHIFT, 77}, },
			{{-1, ERROR, 57}, {4, SHIFT, 78}, },
			{{-1, ERROR, 58}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 59}, {6, SHIFT, 43}, {7, SHIFT, 80}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 60}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 61}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 65}, {7, SHIFT, 85}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 67}, {7, SHIFT, 86}, },
			{{-1, ERROR, 68}, {8, SHIFT, 23}, },
			{{-1, ERROR, 69}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 70}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 71}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 72}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 73}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 74}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 75}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 76}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, ERROR, 77}, {8, SHIFT, 23}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 79}, {7, SHIFT, 97}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 24}, {5, SHIFT, 98}, },
			{{-1, ERROR, 82}, {7, SHIFT, 100}, },
			{{-1, ERROR, 83}, {11, SHIFT, 101}, },
			{{-1, ERROR, 84}, {4, SHIFT, 102}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 40}, {20, SHIFT, 103}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 97}, {4, SHIFT, 105}, },
			{{-1, ERROR, 98}, {6, SHIFT, 43}, {15, SHIFT, 44}, {18, SHIFT, 45}, {26, SHIFT, 46}, {28, SHIFT, 30}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 103}, {8, SHIFT, 23}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 25}, {5, SHIFT, 98}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 47}, {23, 31}, {32, 31}, },
			{{-1, 48}, {27, 56}, {28, 57}, {43, 65}, {58, 79}, {59, 81}, {60, 83}, {61, 84}, {69, 88}, {98, 106}, },
			{{-1, 49}, {70, 89}, },
			{{-1, 50}, {71, 90}, {72, 91}, },
			{{-1, 51}, {73, 92}, {74, 93}, },
			{{-1, 52}, {75, 94}, {76, 95}, },
			{{-1, 53}, },
			{{-1, 54}, {44, 66}, },
			{{-1, 82}, },
			{{-1, 99}, {106, 108}, },
			{{-1, 32}, },
			{{-1, 33}, {32, 62}, },
			{{-1, 34}, },
			{{-1, 35}, {22, 24}, {68, 87}, {77, 96}, {103, 107}, },
			{{-1, 36}, },
			{{-1, 104}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 41}, },
			{{-1, 3}, {7, 14}, },
			{{-1, 4}, {15, 19}, },
			{{-1, 8}, {14, 18}, },
			{{-1, 5}, {21, 22}, },
			{{-1, 55}, {23, 42}, {32, 42}, },
			{{-1, 11}, },
			{{-1, 12}, {11, 16}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: ';', 'entier', identifiant, EOF",
			"expecting: identifiant",
			"expecting: EOF",
			"expecting: ';', ',', ')'",
			"expecting: ';'",
			"expecting: identifiant, EOF",
			"expecting: ';', ',', ')', '['",
			"expecting: 'entier'",
			"expecting: ';', ')'",
			"expecting: '{', identifiant, EOF",
			"expecting: '('",
			"expecting: nombre",
			"expecting: ')', 'entier'",
			"expecting: ']'",
			"expecting: ')'",
			"expecting: ';', '{', 'entier'",
			"expecting: '{'",
			"expecting: ';', '{', '}', 'si', 'tantque', 'retour', 'ecrire', identifiant",
			"expecting: '(', '!', nombre, 'lire', identifiant",
			"expecting: '+', '-', '*', '/', ';', ',', '(', ')', '[', ']', '<', '=', '&', '|', 'alors', 'faire'",
			"expecting: '='",
			"expecting: '}'",
			"expecting: '(', nombre, 'lire', identifiant",
			"expecting: '+', '-', '*', '/', ';', ',', ')', ']', '<', '=', '&', '|', 'alors', 'faire'",
			"expecting: 'alors'",
			"expecting: ';', ',', ')', ']', '|', 'alors', 'faire'",
			"expecting: ';', ',', ')', ']', '&', '|', 'alors', 'faire'",
			"expecting: ';', ',', ')', ']', '<', '=', '&', '|', 'alors', 'faire'",
			"expecting: '+', '-', ';', ',', ')', ']', '<', '=', '&', '|', 'alors', 'faire'",
			"expecting: 'faire'",
			"expecting: '(', ')', '!', nombre, 'lire', identifiant",
			"expecting: ';', '{', '}', 'si', 'sinon', 'tantque', 'retour', 'ecrire', identifiant, EOF",
			"expecting: ',', ')'",
			"expecting: ';', '{', '}', 'si', 'sinon', 'tantque', 'retour', 'ecrire', identifiant",
			"expecting: ';', ',', ')', ']', 'alors', 'faire'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 2, 11, 3, 12, 2, 13, 8, 14, 3, 15, 16, 17, 5, 17, 18, 18, 18, 10, 19, 20, 17, 21, 17, 17, 17, 17, 17, 17, 17, 17, 4, 18, 22, 23, 10, 23, 24, 25, 26, 27, 28, 23, 23, 23, 29, 4, 18, 30, 18, 18, 21, 31, 17, 14, 23, 14, 16, 18, 18, 18, 18, 18, 18, 18, 18, 16, 17, 14, 23, 32, 14, 13, 4, 23, 23, 33, 34, 25, 26, 26, 27, 27, 28, 28, 17, 4, 18, 14, 23, 23, 17, 16, 17, 17, 32, 17, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
