/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import sc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgrammeProgramme(AProgrammeProgramme node);
    void caseAListeVarVar(AListeVarVar node);
    void caseAVarVar(AVarVar node);
    void caseAOuExpression(AOuExpression node);
    void caseAExp2Expression(AExp2Expression node);
    void caseAEtExp2(AEtExp2 node);
    void caseAExp3Exp2(AExp3Exp2 node);
    void caseAEgalExp3(AEgalExp3 node);
    void caseAInferieurExp3(AInferieurExp3 node);
    void caseAExp4Exp3(AExp4Exp3 node);
    void caseAPlusExp4(APlusExp4 node);
    void caseAMoinsExp4(AMoinsExp4 node);
    void caseAExp5Exp4(AExp5Exp4 node);
    void caseAFoisExp5(AFoisExp5 node);
    void caseADiviserExp5(ADiviserExp5 node);
    void caseAExp6Exp5(AExp6Exp5 node);
    void caseANonExp6(ANonExp6 node);
    void caseAExp7Exp6(AExp7Exp6 node);
    void caseANombreExp7(ANombreExp7 node);
    void caseAVarExp7(AVarExp7 node);
    void caseAParanthesesExp7(AParanthesesExp7 node);
    void caseAAppelfonctionExp7(AAppelfonctionExp7 node);
    void caseALireExp7(ALireExp7 node);
    void caseARecursifListeExp(ARecursifListeExp node);
    void caseAFinalListeExp(AFinalListeExp node);
    void caseAFinalListeExpBis(AFinalListeExpBis node);
    void caseARecursifListeExpBis(ARecursifListeExpBis node);
    void caseAInstructionAffectationInstruction(AInstructionAffectationInstruction node);
    void caseAInstructionBlocInstruction(AInstructionBlocInstruction node);
    void caseAInstructionSiInstruction(AInstructionSiInstruction node);
    void caseAInstructionTantqueInstruction(AInstructionTantqueInstruction node);
    void caseAInstructionRappelInstruction(AInstructionRappelInstruction node);
    void caseAInstructionRetourInstruction(AInstructionRetourInstruction node);
    void caseAInstructionEcrireInstruction(AInstructionEcrireInstruction node);
    void caseAInstructionVideInstruction(AInstructionVideInstruction node);
    void caseAListeInstructionListeInstruction(AListeInstructionListeInstruction node);
    void caseAListeFinaleListeInstruction(AListeFinaleListeInstruction node);
    void caseAInstructionAffectation(AInstructionAffectation node);
    void caseAInstructionBlocInstructionBloc(AInstructionBlocInstructionBloc node);
    void caseAAvecsinonInstructionSi(AAvecsinonInstructionSi node);
    void caseASanssinonInstructionSi(ASanssinonInstructionSi node);
    void caseAInstructionSinon(AInstructionSinon node);
    void caseAInstructionTantque(AInstructionTantque node);
    void caseAInstructionRappel(AInstructionRappel node);
    void caseAInstructionRetour(AInstructionRetour node);
    void caseAInstructionEcrire(AInstructionEcrire node);
    void caseAInstructionVide(AInstructionVide node);
    void caseADecvarDecvar(ADecvarDecvar node);
    void caseAListedecvarDecvar(AListedecvarDecvar node);
    void caseAListedecvarListedecvar(AListedecvarListedecvar node);
    void caseAListedecvarFinListedecvar(AListedecvarFinListedecvar node);
    void caseAListedecvarbisListedecvarbis(AListedecvarbisListedecvarbis node);
    void caseAListedecvarbisFinListedecvarbis(AListedecvarbisFinListedecvarbis node);
    void caseAListedecvaroptListedecvaropt(AListedecvaroptListedecvaropt node);
    void caseAListedecvaroptFinListedecvaropt(AListedecvaroptFinListedecvaropt node);
    void caseAAvecparamAppelfonction(AAvecparamAppelfonction node);
    void caseASansparamAppelfonction(ASansparamAppelfonction node);
    void caseADecfoncDecfonc(ADecfoncDecfonc node);
    void caseAListedecfoncListedecfonc(AListedecfoncListedecfonc node);
    void caseAListedecfoncFinListedecfonc(AListedecfoncFinListedecfonc node);

    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTPlus(TPlus node);
    void caseTMoins(TMoins node);
    void caseTFois(TFois node);
    void caseTDiviser(TDiviser node);
    void caseTPointVirgule(TPointVirgule node);
    void caseTVirgule(TVirgule node);
    void caseTParantheseOuvrante(TParantheseOuvrante node);
    void caseTParantheseFermante(TParantheseFermante node);
    void caseTAccoladeOuvrante(TAccoladeOuvrante node);
    void caseTAccoladeFermante(TAccoladeFermante node);
    void caseTCrochetOuvrant(TCrochetOuvrant node);
    void caseTCrochetFermant(TCrochetFermant node);
    void caseTInferieur(TInferieur node);
    void caseTSuperieur(TSuperieur node);
    void caseTEgal(TEgal node);
    void caseTNon(TNon node);
    void caseTEt(TEt node);
    void caseTOu(TOu node);
    void caseTNombre(TNombre node);
    void caseTSi(TSi node);
    void caseTSinon(TSinon node);
    void caseTTantque(TTantque node);
    void caseTAlors(TAlors node);
    void caseTFaire(TFaire node);
    void caseTRetour(TRetour node);
    void caseTEntier(TEntier node);
    void caseTLire(TLire node);
    void caseTEcrire(TEcrire node);
    void caseTIdentifiant(TIdentifiant node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
