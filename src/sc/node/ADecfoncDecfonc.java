/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ADecfoncDecfonc extends PDecfonc
{
    private TIdentifiant _identifiant_;
    private TParantheseOuvrante _parantheseOuvrante_;
    private PListedecvar _listedecvar_;
    private TParantheseFermante _parantheseFermante_;
    private PListedecvaropt _listedecvaropt_;
    private PInstructionBloc _instructionBloc_;

    public ADecfoncDecfonc()
    {
        // Constructor
    }

    public ADecfoncDecfonc(
        @SuppressWarnings("hiding") TIdentifiant _identifiant_,
        @SuppressWarnings("hiding") TParantheseOuvrante _parantheseOuvrante_,
        @SuppressWarnings("hiding") PListedecvar _listedecvar_,
        @SuppressWarnings("hiding") TParantheseFermante _parantheseFermante_,
        @SuppressWarnings("hiding") PListedecvaropt _listedecvaropt_,
        @SuppressWarnings("hiding") PInstructionBloc _instructionBloc_)
    {
        // Constructor
        setIdentifiant(_identifiant_);

        setParantheseOuvrante(_parantheseOuvrante_);

        setListedecvar(_listedecvar_);

        setParantheseFermante(_parantheseFermante_);

        setListedecvaropt(_listedecvaropt_);

        setInstructionBloc(_instructionBloc_);

    }

    @Override
    public Object clone()
    {
        return new ADecfoncDecfonc(
            cloneNode(this._identifiant_),
            cloneNode(this._parantheseOuvrante_),
            cloneNode(this._listedecvar_),
            cloneNode(this._parantheseFermante_),
            cloneNode(this._listedecvaropt_),
            cloneNode(this._instructionBloc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecfoncDecfonc(this);
    }

    public TIdentifiant getIdentifiant()
    {
        return this._identifiant_;
    }

    public void setIdentifiant(TIdentifiant node)
    {
        if(this._identifiant_ != null)
        {
            this._identifiant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifiant_ = node;
    }

    public TParantheseOuvrante getParantheseOuvrante()
    {
        return this._parantheseOuvrante_;
    }

    public void setParantheseOuvrante(TParantheseOuvrante node)
    {
        if(this._parantheseOuvrante_ != null)
        {
            this._parantheseOuvrante_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parantheseOuvrante_ = node;
    }

    public PListedecvar getListedecvar()
    {
        return this._listedecvar_;
    }

    public void setListedecvar(PListedecvar node)
    {
        if(this._listedecvar_ != null)
        {
            this._listedecvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listedecvar_ = node;
    }

    public TParantheseFermante getParantheseFermante()
    {
        return this._parantheseFermante_;
    }

    public void setParantheseFermante(TParantheseFermante node)
    {
        if(this._parantheseFermante_ != null)
        {
            this._parantheseFermante_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parantheseFermante_ = node;
    }

    public PListedecvaropt getListedecvaropt()
    {
        return this._listedecvaropt_;
    }

    public void setListedecvaropt(PListedecvaropt node)
    {
        if(this._listedecvaropt_ != null)
        {
            this._listedecvaropt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listedecvaropt_ = node;
    }

    public PInstructionBloc getInstructionBloc()
    {
        return this._instructionBloc_;
    }

    public void setInstructionBloc(PInstructionBloc node)
    {
        if(this._instructionBloc_ != null)
        {
            this._instructionBloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instructionBloc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifiant_)
            + toString(this._parantheseOuvrante_)
            + toString(this._listedecvar_)
            + toString(this._parantheseFermante_)
            + toString(this._listedecvaropt_)
            + toString(this._instructionBloc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifiant_ == child)
        {
            this._identifiant_ = null;
            return;
        }

        if(this._parantheseOuvrante_ == child)
        {
            this._parantheseOuvrante_ = null;
            return;
        }

        if(this._listedecvar_ == child)
        {
            this._listedecvar_ = null;
            return;
        }

        if(this._parantheseFermante_ == child)
        {
            this._parantheseFermante_ = null;
            return;
        }

        if(this._listedecvaropt_ == child)
        {
            this._listedecvaropt_ = null;
            return;
        }

        if(this._instructionBloc_ == child)
        {
            this._instructionBloc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifiant_ == oldChild)
        {
            setIdentifiant((TIdentifiant) newChild);
            return;
        }

        if(this._parantheseOuvrante_ == oldChild)
        {
            setParantheseOuvrante((TParantheseOuvrante) newChild);
            return;
        }

        if(this._listedecvar_ == oldChild)
        {
            setListedecvar((PListedecvar) newChild);
            return;
        }

        if(this._parantheseFermante_ == oldChild)
        {
            setParantheseFermante((TParantheseFermante) newChild);
            return;
        }

        if(this._listedecvaropt_ == oldChild)
        {
            setListedecvaropt((PListedecvaropt) newChild);
            return;
        }

        if(this._instructionBloc_ == oldChild)
        {
            setInstructionBloc((PInstructionBloc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
