/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListeVarVar extends PVar
{
    private TIdentifiant _identifiant_;
    private TCrochetOuvrant _crochetOuvrant_;
    private PExpression _expression_;
    private TCrochetFermant _crochetFermant_;

    public AListeVarVar()
    {
        // Constructor
    }

    public AListeVarVar(
        @SuppressWarnings("hiding") TIdentifiant _identifiant_,
        @SuppressWarnings("hiding") TCrochetOuvrant _crochetOuvrant_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TCrochetFermant _crochetFermant_)
    {
        // Constructor
        setIdentifiant(_identifiant_);

        setCrochetOuvrant(_crochetOuvrant_);

        setExpression(_expression_);

        setCrochetFermant(_crochetFermant_);

    }

    @Override
    public Object clone()
    {
        return new AListeVarVar(
            cloneNode(this._identifiant_),
            cloneNode(this._crochetOuvrant_),
            cloneNode(this._expression_),
            cloneNode(this._crochetFermant_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListeVarVar(this);
    }

    public TIdentifiant getIdentifiant()
    {
        return this._identifiant_;
    }

    public void setIdentifiant(TIdentifiant node)
    {
        if(this._identifiant_ != null)
        {
            this._identifiant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifiant_ = node;
    }

    public TCrochetOuvrant getCrochetOuvrant()
    {
        return this._crochetOuvrant_;
    }

    public void setCrochetOuvrant(TCrochetOuvrant node)
    {
        if(this._crochetOuvrant_ != null)
        {
            this._crochetOuvrant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._crochetOuvrant_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TCrochetFermant getCrochetFermant()
    {
        return this._crochetFermant_;
    }

    public void setCrochetFermant(TCrochetFermant node)
    {
        if(this._crochetFermant_ != null)
        {
            this._crochetFermant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._crochetFermant_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifiant_)
            + toString(this._crochetOuvrant_)
            + toString(this._expression_)
            + toString(this._crochetFermant_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifiant_ == child)
        {
            this._identifiant_ = null;
            return;
        }

        if(this._crochetOuvrant_ == child)
        {
            this._crochetOuvrant_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._crochetFermant_ == child)
        {
            this._crochetFermant_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifiant_ == oldChild)
        {
            setIdentifiant((TIdentifiant) newChild);
            return;
        }

        if(this._crochetOuvrant_ == oldChild)
        {
            setCrochetOuvrant((TCrochetOuvrant) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._crochetFermant_ == oldChild)
        {
            setCrochetFermant((TCrochetFermant) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
