/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AInstructionEcrire extends PInstructionEcrire
{
    private TEcrire _ecrire_;
    private TParantheseOuvrante _parantheseOuvrante_;
    private PExpression _expression_;
    private TParantheseFermante _parantheseFermante_;
    private TPointVirgule _pointVirgule_;

    public AInstructionEcrire()
    {
        // Constructor
    }

    public AInstructionEcrire(
        @SuppressWarnings("hiding") TEcrire _ecrire_,
        @SuppressWarnings("hiding") TParantheseOuvrante _parantheseOuvrante_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TParantheseFermante _parantheseFermante_,
        @SuppressWarnings("hiding") TPointVirgule _pointVirgule_)
    {
        // Constructor
        setEcrire(_ecrire_);

        setParantheseOuvrante(_parantheseOuvrante_);

        setExpression(_expression_);

        setParantheseFermante(_parantheseFermante_);

        setPointVirgule(_pointVirgule_);

    }

    @Override
    public Object clone()
    {
        return new AInstructionEcrire(
            cloneNode(this._ecrire_),
            cloneNode(this._parantheseOuvrante_),
            cloneNode(this._expression_),
            cloneNode(this._parantheseFermante_),
            cloneNode(this._pointVirgule_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstructionEcrire(this);
    }

    public TEcrire getEcrire()
    {
        return this._ecrire_;
    }

    public void setEcrire(TEcrire node)
    {
        if(this._ecrire_ != null)
        {
            this._ecrire_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ecrire_ = node;
    }

    public TParantheseOuvrante getParantheseOuvrante()
    {
        return this._parantheseOuvrante_;
    }

    public void setParantheseOuvrante(TParantheseOuvrante node)
    {
        if(this._parantheseOuvrante_ != null)
        {
            this._parantheseOuvrante_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parantheseOuvrante_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TParantheseFermante getParantheseFermante()
    {
        return this._parantheseFermante_;
    }

    public void setParantheseFermante(TParantheseFermante node)
    {
        if(this._parantheseFermante_ != null)
        {
            this._parantheseFermante_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parantheseFermante_ = node;
    }

    public TPointVirgule getPointVirgule()
    {
        return this._pointVirgule_;
    }

    public void setPointVirgule(TPointVirgule node)
    {
        if(this._pointVirgule_ != null)
        {
            this._pointVirgule_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pointVirgule_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ecrire_)
            + toString(this._parantheseOuvrante_)
            + toString(this._expression_)
            + toString(this._parantheseFermante_)
            + toString(this._pointVirgule_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ecrire_ == child)
        {
            this._ecrire_ = null;
            return;
        }

        if(this._parantheseOuvrante_ == child)
        {
            this._parantheseOuvrante_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._parantheseFermante_ == child)
        {
            this._parantheseFermante_ = null;
            return;
        }

        if(this._pointVirgule_ == child)
        {
            this._pointVirgule_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ecrire_ == oldChild)
        {
            setEcrire((TEcrire) newChild);
            return;
        }

        if(this._parantheseOuvrante_ == oldChild)
        {
            setParantheseOuvrante((TParantheseOuvrante) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._parantheseFermante_ == oldChild)
        {
            setParantheseFermante((TParantheseFermante) newChild);
            return;
        }

        if(this._pointVirgule_ == oldChild)
        {
            setPointVirgule((TPointVirgule) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
