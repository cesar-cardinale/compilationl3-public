/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ADecvarDecvar extends PDecvar
{
    private TEntier _entier_;
    private TIdentifiant _identifiant_;

    public ADecvarDecvar()
    {
        // Constructor
    }

    public ADecvarDecvar(
        @SuppressWarnings("hiding") TEntier _entier_,
        @SuppressWarnings("hiding") TIdentifiant _identifiant_)
    {
        // Constructor
        setEntier(_entier_);

        setIdentifiant(_identifiant_);

    }

    @Override
    public Object clone()
    {
        return new ADecvarDecvar(
            cloneNode(this._entier_),
            cloneNode(this._identifiant_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADecvarDecvar(this);
    }

    public TEntier getEntier()
    {
        return this._entier_;
    }

    public void setEntier(TEntier node)
    {
        if(this._entier_ != null)
        {
            this._entier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._entier_ = node;
    }

    public TIdentifiant getIdentifiant()
    {
        return this._identifiant_;
    }

    public void setIdentifiant(TIdentifiant node)
    {
        if(this._identifiant_ != null)
        {
            this._identifiant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifiant_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._entier_)
            + toString(this._identifiant_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._entier_ == child)
        {
            this._entier_ = null;
            return;
        }

        if(this._identifiant_ == child)
        {
            this._identifiant_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._entier_ == oldChild)
        {
            setEntier((TEntier) newChild);
            return;
        }

        if(this._identifiant_ == oldChild)
        {
            setIdentifiant((TIdentifiant) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
