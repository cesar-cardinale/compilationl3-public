/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ASanssinonInstructionSi extends PInstructionSi
{
    private TSi _si_;
    private PExpression _expression_;
    private TAlors _alors_;
    private PInstructionBloc _instructionBloc_;

    public ASanssinonInstructionSi()
    {
        // Constructor
    }

    public ASanssinonInstructionSi(
        @SuppressWarnings("hiding") TSi _si_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TAlors _alors_,
        @SuppressWarnings("hiding") PInstructionBloc _instructionBloc_)
    {
        // Constructor
        setSi(_si_);

        setExpression(_expression_);

        setAlors(_alors_);

        setInstructionBloc(_instructionBloc_);

    }

    @Override
    public Object clone()
    {
        return new ASanssinonInstructionSi(
            cloneNode(this._si_),
            cloneNode(this._expression_),
            cloneNode(this._alors_),
            cloneNode(this._instructionBloc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASanssinonInstructionSi(this);
    }

    public TSi getSi()
    {
        return this._si_;
    }

    public void setSi(TSi node)
    {
        if(this._si_ != null)
        {
            this._si_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._si_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TAlors getAlors()
    {
        return this._alors_;
    }

    public void setAlors(TAlors node)
    {
        if(this._alors_ != null)
        {
            this._alors_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alors_ = node;
    }

    public PInstructionBloc getInstructionBloc()
    {
        return this._instructionBloc_;
    }

    public void setInstructionBloc(PInstructionBloc node)
    {
        if(this._instructionBloc_ != null)
        {
            this._instructionBloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instructionBloc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._si_)
            + toString(this._expression_)
            + toString(this._alors_)
            + toString(this._instructionBloc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._si_ == child)
        {
            this._si_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._alors_ == child)
        {
            this._alors_ = null;
            return;
        }

        if(this._instructionBloc_ == child)
        {
            this._instructionBloc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._si_ == oldChild)
        {
            setSi((TSi) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._alors_ == oldChild)
        {
            setAlors((TAlors) newChild);
            return;
        }

        if(this._instructionBloc_ == oldChild)
        {
            setInstructionBloc((PInstructionBloc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
