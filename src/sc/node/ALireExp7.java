/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ALireExp7 extends PExp7
{
    private TLire _lire_;
    private TParantheseOuvrante _parantheseOuvrante_;
    private TParantheseFermante _parantheseFermante_;

    public ALireExp7()
    {
        // Constructor
    }

    public ALireExp7(
        @SuppressWarnings("hiding") TLire _lire_,
        @SuppressWarnings("hiding") TParantheseOuvrante _parantheseOuvrante_,
        @SuppressWarnings("hiding") TParantheseFermante _parantheseFermante_)
    {
        // Constructor
        setLire(_lire_);

        setParantheseOuvrante(_parantheseOuvrante_);

        setParantheseFermante(_parantheseFermante_);

    }

    @Override
    public Object clone()
    {
        return new ALireExp7(
            cloneNode(this._lire_),
            cloneNode(this._parantheseOuvrante_),
            cloneNode(this._parantheseFermante_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALireExp7(this);
    }

    public TLire getLire()
    {
        return this._lire_;
    }

    public void setLire(TLire node)
    {
        if(this._lire_ != null)
        {
            this._lire_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lire_ = node;
    }

    public TParantheseOuvrante getParantheseOuvrante()
    {
        return this._parantheseOuvrante_;
    }

    public void setParantheseOuvrante(TParantheseOuvrante node)
    {
        if(this._parantheseOuvrante_ != null)
        {
            this._parantheseOuvrante_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parantheseOuvrante_ = node;
    }

    public TParantheseFermante getParantheseFermante()
    {
        return this._parantheseFermante_;
    }

    public void setParantheseFermante(TParantheseFermante node)
    {
        if(this._parantheseFermante_ != null)
        {
            this._parantheseFermante_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parantheseFermante_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lire_)
            + toString(this._parantheseOuvrante_)
            + toString(this._parantheseFermante_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lire_ == child)
        {
            this._lire_ = null;
            return;
        }

        if(this._parantheseOuvrante_ == child)
        {
            this._parantheseOuvrante_ = null;
            return;
        }

        if(this._parantheseFermante_ == child)
        {
            this._parantheseFermante_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lire_ == oldChild)
        {
            setLire((TLire) newChild);
            return;
        }

        if(this._parantheseOuvrante_ == oldChild)
        {
            setParantheseOuvrante((TParantheseOuvrante) newChild);
            return;
        }

        if(this._parantheseFermante_ == oldChild)
        {
            setParantheseFermante((TParantheseFermante) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
