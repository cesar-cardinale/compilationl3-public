Package sc;

Helpers

lettre = [['a' .. 'z'] + ['A' .. 'Z']];
chiffre = ['0' .. '9'];
alpha = [lettre + ['_' + '$']];
alphanum = [lettre + chiffre];

Tokens

espaces = (' ' | 13 | 10)+;
commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

plus = '+';
moins = '-';
fois = '*';
diviser = '/';
point_virgule = ';';
virgule = ',';
paranthese_ouvrante = '(';
paranthese_fermante = ')';
accolade_ouvrante = '{';
accolade_fermante = '}';
crochet_ouvrant = '[';
crochet_fermant = ']';
inferieur = '<';
superieur = '>';
egal = '=';
non = '!';
et = '&';
ou = '|';

nombre = chiffre+;

si = 'si';
sinon = 'sinon';
tantque = 'tantque';
alors = 'alors';
faire = 'faire';
retour = 'retour';
entier = 'entier';
lire = 'lire';
ecrire = 'ecrire';

identifiant = lettre [lettre + chiffre]*;

Ignored Tokens

espaces, commentaire;

Productions

programme = {programme} listedecvaropt listedecfonc;

// Variable
var = {liste_var} identifiant crochet_ouvrant expression crochet_fermant | {var} identifiant;

// Expression
expression = {ou} expression ou exp2 | {exp2} exp2;
exp2 = {et} exp2 et exp3 | {exp3} exp3;
exp3 = {egal} exp3 egal exp4 | {inferieur} exp3 inferieur exp4 | {exp4} exp4;
exp4 = {plus} exp4 plus exp5 | {moins} exp4 moins exp5 | {exp5} exp5;
exp5 = {fois} exp5 fois exp6 | {diviser} exp5 diviser exp6 | {exp6} exp6;
exp6 = {non} non exp6 | {exp7} exp7;
exp7 = {nombre} nombre | {var} var | {parantheses} paranthese_ouvrante expression paranthese_fermante | {appelfonction} appelfonction | {lire} lire paranthese_ouvrante paranthese_fermante;

liste_exp = {recursif} expression liste_exp_bis | {final} expression;
liste_exp_bis = {final} virgule expression | {recursif} virgule expression liste_exp_bis;

// Instruction
instruction = {instruction_affectation} instruction_affectation | {instruction_bloc} instruction_bloc | {instruction_si} instruction_si | {instruction_tantque} instruction_tantque | {instruction_rappel} instruction_rappel | {instruction_retour} instruction_retour | {instruction_ecrire} instruction_ecrire | {instruction_vide} instruction_vide ;
liste_instruction = {liste_instruction} instruction liste_instruction | {liste_finale};
instruction_affectation = var egal expression point_virgule;
instruction_bloc = {instruction_bloc} accolade_ouvrante liste_instruction accolade_fermante;
instruction_si = {avecsinon} si expression alors instruction_bloc instruction_sinon | {sanssinon} si expression alors instruction_bloc;
instruction_sinon = sinon instruction_bloc;
instruction_tantque = tantque expression faire instruction_bloc;
instruction_rappel = appelfonction point_virgule;
instruction_retour = retour expression point_virgule;
instruction_ecrire = ecrire paranthese_ouvrante expression paranthese_fermante point_virgule;
instruction_vide = point_virgule;

// Variable
decvar = {decvar} entier identifiant | {listedecvar} entier identifiant crochet_ouvrant nombre crochet_fermant;
listedecvar = {listedecvar} decvar listedecvarbis | {listedecvar_fin};
listedecvarbis = {listedecvarbis} virgule decvar listedecvarbis | {listedecvarbis_fin};
listedecvaropt = {listedecvaropt} listedecvar point_virgule | {listedecvaropt_fin};

// Fonction
appelfonction = {avecparam} identifiant paranthese_ouvrante liste_exp paranthese_fermante | {sansparam} identifiant paranthese_ouvrante paranthese_fermante;
decfonc = {decfonc} identifiant paranthese_ouvrante listedecvar paranthese_fermante listedecvaropt instruction_bloc;
listedecfonc = {listedecfonc} decfonc listedecfonc | {listedecfonc_fin};



